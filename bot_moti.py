import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackContext, ConversationHandler, MessageHandler,
    CallbackQueryHandler, filters
)
import sqlite3
import random
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import motivations

ADDING_HABIT, SETTING_FREQUENCY, CONFIRMING_COMPLETION, DELETING_HABIT = range(4)

class HabitTrackerBot:
    def __init__(self, token):
        self.token = token
        self.app = Application.builder().token(self.token).build()
        self._init_db()
        self._add_archived_column()

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = BackgroundScheduler()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.scheduler.add_job(
            self.send_reminder_sync,
            IntervalTrigger(hours=24),
            id='habit_reminder',
            replace_existing=True
        )
        
        # –ó–∞–¥–∞—á–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.scheduler.add_job(
            self.update_progress_sync,
            IntervalTrigger(hours=1),
            id='progress_update',
            replace_existing=True
        )

        self.scheduler.start()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', self.start),
                CallbackQueryHandler(self.button_handler)
            ],
            states={
                ADDING_HABIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_habit)],
                SETTING_FREQUENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_frequency)],
                CONFIRMING_COMPLETION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.complete_habit)],
                DELETING_HABIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.delete_habit)]
            },
            fallbacks=[CommandHandler('start', self.start)]
        )

        self.app.add_handler(self.conv_handler)
        
        
    def update_progress_sync(self):
        self.app.create_task(self.update_progress())
        
    async def update_progress(self):
        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, habit_name, progress, total, frequency FROM habits WHERE archived = 0')
        habits = cursor.fetchall()

        for habit in habits:
            habit_id, habit_name, progress, total, frequency = habit

            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
            if frequency == '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ':
                increment = 100 / 30  # –ü—Ä–æ–≥—Ä–µ—Å—Å 3.33% –≤ –¥–µ–Ω—å
            elif frequency == '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ':
                increment = 100 / 4   # –ü—Ä–æ–≥—Ä–µ—Å—Å 25% –≤ –Ω–µ–¥–µ–ª—é
            elif frequency == '–ï–∂–µ–º–µ—Å—è—á–Ω–æ':
                increment = 100       # –ü—Ä–æ–≥—Ä–µ—Å—Å 100% –≤ –º–µ—Å—è—Ü
            else:
                continue  # –µ—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            new_progress = progress + (increment * total / 100)
            if new_progress >= total:
                cursor.execute('UPDATE habits SET progress = ?, archived = 1 WHERE id = ?', (total, habit_id))
            else:
                cursor.execute('UPDATE habits SET progress = ? WHERE id = ?', (new_progress, habit_id))

        conn.commit()
        conn.close()

    def _init_db(self):
        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS habits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                habit_name TEXT,
                frequency TEXT,
                progress INTEGER DEFAULT 0,
                total INTEGER,
                start_date TEXT,
                archived INTEGER DEFAULT 0
            )
        ''')
        conn.commit()
        conn.close()
        
    def _add_archived_column(self):
        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        try:
            cursor.execute('ALTER TABLE habits ADD COLUMN archived INTEGER DEFAULT 0')
        except sqlite3.OperationalError:
            pass
        conn.commit()
        conn.close()

    async def start(self, update: Update, context: CallbackContext):
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Iron Discipline! –≠—Ç–æ —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ –Ω–æ–≤—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º. "
                "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è? –ù–∞–∂–º–∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                reply_markup=reply_markup
            )
        elif update.callback_query:
            await update.callback_query.message.edit_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Iron Discipline! –≠—Ç–æ —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ –Ω–æ–≤—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º. "
                "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è? –ù–∞–∂–º–∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                reply_markup=reply_markup
            )
        return ConversationHandler.END

    async def send_main_menu(self, update: Update):
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data='add_habit')],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data='progress')],
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é", callback_data='motivation')],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data='delete_habit')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            "–¢—ã –≥–æ—Ç–æ–≤ —É–ª—É—á—à–∏—Ç—å —Å–µ–±—è? –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ:\n\n"
            "üå± –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤—É—é —Ü–µ–ª—å, –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—à—å –µ—ë –≤—ã–ø–æ–ª–Ω—è—Ç—å, –∏ –º—ã –Ω–∞—á–Ω—ë–º –ø—É—Ç—å!\n\n"
            "üöÄ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: –ó–∞–≥–ª—è–Ω–∏ –≤ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—à—å—Å—è. –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–±–µ–¥–∞!\n\n"
            "üí™ –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é: –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Å–∏–ª—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –ü–æ–ª—É—á–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–Ω–∏–º–µ—Ç –±–æ–µ–≤–æ–π –¥—É—Ö!\n\n"
            "üéØ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –æ—Å–≤–æ–∏–ª –ø—Ä–∏–≤—ã—á–∫—É ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ—ë.\n\n"
            "–í—ã–±–∏—Ä–∞–π —Ü–µ–ª—å, —Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏ –ø–æ–±–µ–∂–¥–∞–π —Å–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üåü",
            reply_markup=reply_markup
        )

    async def button_handler(self, update: Update, context: CallbackContext):
        query = update.callback_query
        await query.answer()

        if query.data == 'main_menu':
            await self.send_main_menu(update)
            return ConversationHandler.END
        elif query.data == 'add_habit':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
            return ADDING_HABIT
        elif query.data == 'progress':
            await self.check_progress(update, context)
            return ConversationHandler.END
        elif query.data == 'motivation':
            await self.send_motivation(update, context)
            return ConversationHandler.END
        elif query.data == 'complete_habit':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –µ—ë –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
            return CONFIRMING_COMPLETION
        elif query.data == 'delete_habit':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
            return DELETING_HABIT

    async def add_habit(self, update: Update, context: CallbackContext):
        habit_name = update.message.text
        context.user_data['habit_name'] = habit_name

        keyboard = [
            [KeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ")],
            [KeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")],
            [KeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?", reply_markup=reply_markup)
        return SETTING_FREQUENCY

    async def set_frequency(self, update: Update, context: CallbackContext):
        frequency = update.message.text
        habit_name = context.user_data.get('habit_name')
        user_id = update.message.from_user.id

        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO habits (user_id, habit_name, frequency, total, start_date) VALUES (?, ?, ?, ?, ?)',
                      (user_id, habit_name, frequency, 30, datetime.now().strftime('%Y-%m-%d')))
        conn.commit()
        conn.close()

        await update.message.reply_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π '{frequency}'. –£–¥–∞—á–∏!")
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!", reply_markup=reply_markup)
        return ConversationHandler.END
    
    async def complete_habit(self, update: Update, context: CallbackContext):
         # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        habit_name = update.message.text
        user_id = update.message.from_user.id

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT id, progress, total FROM habits WHERE user_id = ? AND habit_name = ? AND archived = 0', 
                   (user_id, habit_name))
        habit = cursor.fetchone()

        if habit:
            habit_id, progress, total = habit
            new_progress = progress + 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 10 (—ç—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)

            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–≥ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª —Ü–µ–ª—å, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫—É
            if new_progress >= total:
                cursor.execute('UPDATE habits SET progress = ?, archived = 1 WHERE id = ?', (total, habit_id))
                message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É '{habit_name}' –∏ –æ–Ω–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤."
            else:
                cursor.execute('UPDATE habits SET progress = ? WHERE id = ?', (new_progress, habit_id))
                message = f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '{habit_name}' —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 10. –¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {new_progress}/{total}."

            conn.commit()
        else:
            message = "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(message)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply_markup)
    
        return ConversationHandler.END
    
    async def delete_habit(self, update: Update, context: CallbackContext):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        habit_name = update.message.text
        user_id = update.message.from_user.id

        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM habits WHERE user_id = ? AND habit_name = ?', (user_id, habit_name))
        conn.commit()
        conn.close()

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞
        await update.message.reply_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!", reply_markup=reply_markup)
        
        return ConversationHandler.END


    async def check_progress(self, update: Update, context: CallbackContext):
        query = update.callback_query
        user_id = query.from_user.id

        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        cursor.execute('SELECT habit_name, progress, total FROM habits WHERE user_id = ? AND archived = 0', (user_id,))
        habits = cursor.fetchall()
        conn.close()

        if not habits:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏!"
        else:
            message = "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            for habit in habits:
                name, progress, total = habit
                percentage = (progress / total) * 100 if total > 0 else 0
                message += f"üéØ {name}: {progress}/{total} ({percentage:.1f}%)\n"

        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def send_motivation(self, update: Update, context: CallbackContext):
        motivational_quotes = motivations.motivations_list
        query = update.callback_query
        quote = random.choice(motivational_quotes)
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üí™ {quote}", reply_markup=reply_markup)

    async def send_reminder(self):
        conn = sqlite3.connect('grim_hustle.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, habit_name, frequency FROM habits WHERE archived = 0')
        habits = cursor.fetchall()
        conn.close()

        for user_id, habit_name, frequency in habits:
            message = f"–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É '{habit_name}'! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π!"
            try:
                await self.app.bot.send_message(user_id, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    def send_reminder_sync(self):
        self.app.create_task(self.send_reminder())

    def run(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling()

if __name__ == "__main__":
    bot = HabitTrackerBot('7553618991:AAF9_O2JYaLbwbFRuMmXURk5wfJv9McViPY')
    bot.run()

